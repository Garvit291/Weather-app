{"version":3,"sources":["component/weather.component.js","component/form.component.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","error","role","city","class","width","height","viewBox","fill","xmlns","fill-rule","d","clip-rule","icon","tempcelc","min","max","minmaxTemp","tempmin","tempmax","desc","Form","onSubmit","loadweather","type","name","autoComplete","placeholder","api","App","getWeather","e","a","preventDefault","target","elements","value","fetch","apicall","json","response","console","log","setState","cel","calcel","main","temp","temp_min","temp_max","weather","description","geticon","wicon","id","state","undefined","thunderstorm","drizzle","rain","snow","fog","clear","clouds","Math","floor","range","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cf3b9fb6.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../style.css';\r\nconst Weather = (props) => {\r\n    return(\r\n        <div className=\"container \">\r\n             <div>{props.error? error():null}</div>\r\n           <div className=\"cards \">\r\n           {props.city?(<h1>\r\n               <span>\r\n           <svg class=\"bi bi-geo-alt\" width=\".75em\" height=\".75em\" viewBox=\"0 0 16 16\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path fill-rule=\"evenodd\" d=\"M8 16s6-5.686 6-10A6 6 0 002 6c0 4.314 6 10 6 10zm0-7a3 3 0 100-6 3 3 0 000 6z\" clip-rule=\"evenodd\"/>\r\n                </svg>\r\n                </span>\r\n\r\n               {props.city}</h1>):null}\r\n           <h5 className=\"py-4\">\r\n           <i className={`wi ${props.icon} display-1`}></i>\r\n           </h5>\r\n           {props.tempcelc?(<h1 className=\"py-4\">{props.tempcelc}&deg;</h1>):null}\r\n           {/**min max temp  */}\r\n           {minmaxTemp(props.tempmin,props.tempmax)}\r\n           <h1 className=\"py-4 a \">\r\n               {props.desc}\r\n           </h1>\r\n           </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nfunction minmaxTemp(min,max){\r\n    if(min && max){\r\n    return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;</span>\r\n            <span className=\"px-4\">{max}&deg;</span>\r\n        </h3>\r\n    );\r\n    }\r\n}\r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n          Enter city \r\n        </div>\r\n    );\r\n}\r\nexport default Weather;","import React from 'react';\r\nimport \"./form.css\";\r\nconst Form =(props) =>\r\n{\r\n    return(\r\n        <div className=\"container\"> \r\n            <div>{props.error? error():null}</div>\r\n            <form onSubmit={props.loadweather} >\r\n            <div className=\"box\">\r\n                <div className=\"input\">\r\n                <input \r\n                type=\"text\"\r\n                 className=\"form-control pt-4 pb-4 searchbar\"\r\n                 name=\"city\"\r\n                autoComplete=\"off\"\r\n                placeholder=\"City..\"\r\n                 />\r\n                </div>\r\n                <div className=\"but\">\r\n                <button className=\"button \"> Get Weather </button>\r\n            </div>\r\n            </div>\r\n            </form>\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n \r\nfunction error(){\r\n    return(\r\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n          Enter city \r\n        </div>\r\n    );\r\n}\r\nexport default Form;","import React ,{Component} from 'react';\nimport './App.css';\nimport Weather from './component/weather.component';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Form from \"./component/form.component\";\n\nconst api ={\n  key : \"a4e541285853353e8e6a0a093e5dd25b\"\n}\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state= {\n      city: undefined,\n      icon: undefined,\n      main: undefined,\n      cel: undefined,\n      tempmax:undefined,\n      tempmin:undefined,\n      desc:\"\",\n      error:false\n    \n    };\n    //this.getWeather();\n    this.wicon ={\n      thunderstorm : \"wi-thunderstorm\",\n      drizzle : \"wi-sleet\",\n      rain : \"wi-storm-showers\",\n      snow : \"wi-snow\",\n      fog : \"wi-fog\",\n      clear : \"wi-day-sunny\",\n      clouds : \"wi-day-fog\"\n    }\n\n  }\n  calcel(temp)\n  {\n    let cel=Math.floor(temp-273.15);\n    return cel;\n  }\n\n  geticon(icon,range){\n     switch(true){\n       case range>=200 && range <=232:\n        this.setState({icon: this.wicon.thunderstorm});\n        break;\n        case range>=300 && range <=321:\n        this.setState({icon: this.wicon.drizzle});\n        break;\n        case range>=500 && range <=531:\n        this.setState({icon: this.wicon.rain});\n        break;\n        case range>=600 && range <=622:\n        this.setState({icon: this.wicon.snow});\n        break;\n        case range>=701 && range <=781:\n        this.setState({icon: this.wicon.fog});\n        break;\n        case range===800:\n          this.setState({icon : this.wicon.clear});\n          break;\n          case range>=801 && range <=804:\n            this.setState({icon: this.wicon.clouds})\n            break;\n            default:\n              this.setState({icon :this.wicon.drizzle})\n      }\n    }\n\n  getWeather = async (e) => {\n    e.preventDefault();\n    const city= e.target.elements.city.value;\n     \n\n    const apicall= await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${api.key}`);\n    if(apicall){\n      const response = await apicall.json();\n          console.log(response);\n\n          this.setState({\n           city: response.name,\n           cel: this.calcel(response.main.temp),\n           tempmin :this.calcel(response.main.temp_min),\n           tempmax : this.calcel(response.main.temp_max),\n           desc : response.weather[0].description,\n            })\n\n            this.geticon(this.wicon,response.weather[0].id)\n          } else{\n            this.setState({error:true});\n            \n          }\n  };\n\n  render(){\n            return (\n               <div className=\"App\">\n                  <Form loadweather={this.getWeather}/>\n                  <Weather city={this.state.city} \n                  tempcelc={this.state.cel} \n                  tempmax={this.state.tempmax} \n                  tempmin={this.state.tempmin}\n                  desc={this.state.desc}\n                  icon={this.state.icon}\n                  error={this.state.error}\n                  />\n                </div>\n              );\n          }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}